{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","title","filterBy","handleChange","event","target","name","value","key","setState","getFilteredTodos","todos","props","filter","todo","toLowerCase","includes","completed","id","this","className","type","onChange","map","classNames","readOnly","userId","onClick","selectedUser","React","Component","API_URL","getTodos","a","fetch","response","json","getUsers","CurrentUser","user","currentUser","prevProps","email","phone","reset","App","selectedUserId","loadedTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.93638055.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ntype Props = {\n  todos: Todo[];\n  id: number;\n  selectedUser: (value: number) => void;\n};\n\ntype State = {\n  title: string;\n  filterBy: string;\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    title: '',\n    filterBy: '',\n  };\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    const { name, value } = event.target;\n    const key: keyof State = name as keyof State;\n\n    this.setState({\n      [key]: value,\n    } as Pick<State, keyof State>);\n  };\n\n  getFilteredTodos = () => {\n    const { todos } = this.props;\n\n    return todos\n      .filter(todo => (\n        todo.title && todo.title.toLowerCase().includes(this.state.title.toLowerCase())))\n      .filter(todo => {\n        switch (this.state.filterBy) {\n          case 'Active':\n            return !todo.completed;\n          case 'Completed':\n            return todo.completed;\n          case 'All':\n          default:\n            return todos;\n        }\n      });\n  };\n\n  render() {\n    const { id } = this.props;\n    const { title, filterBy } = this.state;\n    const todos = this.getFilteredTodos();\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__form\">\n          <input\n            className=\"TodoList__item\"\n            type=\"text\"\n            name=\"title\"\n            value={title}\n            onChange={this.handleChange}\n          />\n\n          <select\n            name=\"filterBy\"\n            className=\"TodoList__item\"\n            value={filterBy}\n            onChange={this.handleChange}\n          >\n            <option value=\"All\">All</option>\n            <option value=\"Active\">Active</option>\n            <option value=\"Completed\">Completed</option>\n          </select>\n        </div>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {todos.map(todo => (\n              <li\n                key={todo.id}\n                className={classNames(\n                  'TodoList__item',\n                  {\n                    'TodoList__item--unchecked': !todo.completed,\n                    'TodoList__item--checked': todo.completed,\n                  },\n                )}\n              >\n                <label>\n                  <input type=\"checkbox\" readOnly />\n                  {todo.title}\n                </label>\n\n                <button\n                  className={classNames(\n                    'TodoList__user-button',\n                    'button',\n                    {\n                      'TodoList__user-button--selected': todo.userId === id,\n                    },\n                  )}\n                  type=\"button\"\n                  onClick={() => {\n                    this.props.selectedUser(todo.userId);\n                  }}\n                >\n                  User\n                  {`#${todo.userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","// eslint-disable-next-line\nconst API_URL = 'https://mate.academy/students-api/';\n\nexport const getTodos = async () => {\n  const response = await fetch(`${API_URL}/todos`);\n\n  return response.json();\n};\n\nexport const getUsers = async (userId: number) => {\n  const response = await fetch(`${API_URL}/users/${userId}`);\n\n  return response.json();\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { getUsers } from '../../api/api';\n\ntype Props = {\n  userId: number;\n  reset: () => void;\n};\n\ntype State = {\n  user: User | null\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  componentDidMount() {\n    this.currentUser(this.props.userId);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.userId !== this.props.userId) {\n      this.currentUser(this.props.userId);\n    }\n  }\n\n  async currentUser(userId: number) {\n    const user = await getUsers(userId);\n\n    this.setState({ user });\n  }\n\n  render() {\n    const { user } = this.state;\n\n    return (\n      user && (\n        <>\n          <div className=\"CurrentUser\">\n            <h2 className=\"CurrentUser__title\">\n              <span>{`Selected user: ${user.id}`}</span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">\n              {user.name}\n            </h3>\n            <p className=\"CurrentUser__email\">\n              {user.email}\n            </p>\n            <p className=\"CurrentUser__phone\">\n              {user.phone}\n            </p>\n          </div>\n          <button\n            type=\"button\"\n            className=\"button CurrentUser__clear\"\n            onClick={this.props.reset}\n          >\n            reset\n          </button>\n        </>\n      )\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\ninterface State {\n  selectedUserId: number;\n  todos: Todo[];\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n  };\n\n  async componentDidMount() {\n    const loadedTodos = await getTodos();\n\n    this.setState({\n      todos: loadedTodos,\n    });\n  }\n\n  selectedUser = (userId: number) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  };\n\n  reset = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  };\n\n  render() {\n    const { selectedUserId, todos } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            id={selectedUserId}\n            selectedUser={this.selectedUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                reset={this.reset}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}